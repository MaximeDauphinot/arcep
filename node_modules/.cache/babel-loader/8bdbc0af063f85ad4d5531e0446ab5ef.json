{"ast":null,"code":"var _jsxFileName = \"/Users/maximedauphinot/42code/arcep/src/App.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './App.css';\nvar margin = {\n  top: 10,\n  right: 10,\n  bottom: 10,\n  left: 10\n},\n    width = 445 - margin.left - margin.right,\n    height = 445 - margin.top - margin.bottom; // append the svg object to the body of the page\n\nvar svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // read json data\n\nd3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_dendrogram_full.json\", function (data) {\n  // Give the data to this cluster layout:\n  var root = d3.hierarchy(data).sum(function (d) {\n    return d.value;\n  }); // Here the size of each leave is given in the 'value' field in input data\n  // Then d3.treemap computes the position of each element of the hierarchy\n\n  d3.treemap().size([width, height]).padding(2)(root); // use this information to add rectangles:\n\n  svg.selectAll(\"rect\").data(root.leaves()).enter().append(\"rect\").attr('x', function (d) {\n    return d.x0;\n  }).attr('y', function (d) {\n    return d.y0;\n  }).attr('width', function (d) {\n    return d.x1 - d.x0;\n  }).attr('height', function (d) {\n    return d.y1 - d.y0;\n  }).style(\"stroke\", \"black\").style(\"fill\", \"slateblue\"); // and to add the text labels\n\n  svg.selectAll(\"text\").data(root.leaves()).enter().append(\"text\").attr(\"x\", function (d) {\n    return d.x0 + 5;\n  }) // +10 to adjust position (more right)\n  .attr(\"y\", function (d) {\n    return d.y0 + 20;\n  }) // +20 to adjust position (lower)\n  .text(function (d) {\n    return d.data.name;\n  }).attr(\"font-size\", \"15px\").attr(\"fill\", \"white\");\n});\n\nclass App extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Hello World\"), React.createElement(\"div\", {\n      id: \"my_dataviz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/maximedauphinot/42code/arcep/src/App.js"],"names":["React","Component","d3","margin","top","right","bottom","left","width","height","svg","select","append","attr","json","data","root","hierarchy","sum","d","value","treemap","size","padding","selectAll","leaves","enter","x0","y0","x1","y1","style","text","name","App","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './App.css';\n\nvar margin = {top: 10, right: 10, bottom: 10, left: 10},\n  width = 445 - margin.left - margin.right,\n  height = 445 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n.append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n.append(\"g\")\n  .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// read json data\nd3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_dendrogram_full.json\", function(data) {\n\n  // Give the data to this cluster layout:\n  var root = d3.hierarchy(data).sum(function(d){ return d.value}) // Here the size of each leave is given in the 'value' field in input data\n\n  // Then d3.treemap computes the position of each element of the hierarchy\n  d3.treemap()\n    .size([width, height])\n    .padding(2)\n    (root)\n\n  // use this information to add rectangles:\n  svg\n    .selectAll(\"rect\")\n    .data(root.leaves())\n    .enter()\n    .append(\"rect\")\n      .attr('x', function (d) { return d.x0; })\n      .attr('y', function (d) { return d.y0; })\n      .attr('width', function (d) { return d.x1 - d.x0; })\n      .attr('height', function (d) { return d.y1 - d.y0; })\n      .style(\"stroke\", \"black\")\n      .style(\"fill\", \"slateblue\")\n\n  // and to add the text labels\n  svg\n    .selectAll(\"text\")\n    .data(root.leaves())\n    .enter()\n    .append(\"text\")\n      .attr(\"x\", function(d){ return d.x0+5})    // +10 to adjust position (more right)\n      .attr(\"y\", function(d){ return d.y0+20})    // +20 to adjust position (lower)\n      .text(function(d){ return d.data.name })\n      .attr(\"font-size\", \"15px\")\n      .attr(\"fill\", \"white\")\n})\n\n\nclass App extends Component {\n  render() {\n    return (        \n      <div className=\"App\">\n        <h1>Hello World</h1>\n        <div id=\"my_dataviz\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}